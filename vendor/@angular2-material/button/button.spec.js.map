{"version":3,"file":"button.spec.js","sourceRoot":"","sources":["../../src/demo-app/components/button/button.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {it, describe, expect, beforeEach, inject} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {Component} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MdButton, MdAnchor} from './button';\n\n\ndescribe('MdButton', () => {\n  let builder: TestComponentBuilder;\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  // General button tests\n  it('should apply class based on color attribute', (done: () => void) => {\n    return builder.createAsync(TestApp).then(fixture => {\n      let testComponent = fixture.debugElement.componentInstance;\n      let buttonDebugElement = fixture.debugElement.query(By.css('button'));\n      let aDebugElement = fixture.debugElement.query(By.css('a'));\n\n      testComponent.buttonColor = 'primary';\n      fixture.detectChanges();\n      expect(buttonDebugElement.nativeElement.classList.contains('md-primary')).toBe(true);\n      expect(aDebugElement.nativeElement.classList.contains('md-primary')).toBe(true);\n\n      testComponent.buttonColor = 'accent';\n      fixture.detectChanges();\n      expect(buttonDebugElement.nativeElement.classList.contains('md-accent')).toBe(true);\n      expect(aDebugElement.nativeElement.classList.contains('md-accent')).toBe(true);\n      done();\n    });\n  });\n\n  it('should should not clear previous defined classes', (done: () => void) => {\n    return builder.createAsync(TestApp).then(fixture => {\n      let testComponent = fixture.debugElement.componentInstance;\n      let buttonDebugElement = fixture.debugElement.query(By.css('button'));\n\n      buttonDebugElement.nativeElement.classList.add('custom-class');\n\n      testComponent.buttonColor = 'primary';\n      fixture.detectChanges();\n\n      expect(buttonDebugElement.nativeElement.classList.contains('md-primary')).toBe(true);\n      expect(buttonDebugElement.nativeElement.classList.contains('custom-class')).toBe(true);\n\n      testComponent.buttonColor = 'accent';\n      fixture.detectChanges();\n\n      expect(buttonDebugElement.nativeElement.classList.contains('md-primary')).toBe(false);\n      expect(buttonDebugElement.nativeElement.classList.contains('md-accent')).toBe(true);\n      expect(buttonDebugElement.nativeElement.classList.contains('custom-class')).toBe(true);\n\n      done();\n    });\n  });\n\n  // Regular button tests\n  describe('button[md-button]', () => {\n    it('should handle a click on the button', (done: () => void) => {\n      return builder.createAsync(TestApp).then(fixture => {\n        let testComponent = fixture.debugElement.componentInstance;\n        let buttonDebugElement = fixture.debugElement.query(By.css('button'));\n\n        buttonDebugElement.nativeElement.click();\n        expect(testComponent.clickCount).toBe(1);\n        done();\n      });\n    });\n\n    it('should not increment if disabled', (done: () => void) => {\n      return builder.createAsync(TestApp).then(fixture => {\n        let testComponent = fixture.debugElement.componentInstance;\n        let buttonDebugElement = fixture.debugElement.query(By.css('button'));\n\n        testComponent.isDisabled = true;\n        fixture.detectChanges();\n\n        buttonDebugElement.nativeElement.click();\n\n        expect(testComponent.clickCount).toBe(0);\n        done();\n      });\n    });\n\n  });\n\n  // Anchor button tests\n  describe('a[md-button]', () => {\n    it('should not redirect if disabled', (done: () => void) => {\n      return builder.createAsync(TestApp).then(fixture => {\n        let testComponent = fixture.debugElement.componentInstance;\n        let buttonDebugElement = fixture.debugElement.query(By.css('a'));\n\n        testComponent.isDisabled = true;\n        fixture.detectChanges();\n\n        buttonDebugElement.nativeElement.click();\n        // will error if page reloads\n        done();\n      });\n    });\n\n    it('should remove tabindex if disabled', (done: () => void) => {\n      return builder.createAsync(TestApp).then(fixture => {\n        let testComponent = fixture.debugElement.componentInstance;\n        let buttonDebugElement = fixture.debugElement.query(By.css('a'));\n        expect(buttonDebugElement.nativeElement.getAttribute('tabIndex')).toBe(null);\n\n        testComponent.isDisabled = true;\n        fixture.detectChanges();\n        expect(buttonDebugElement.nativeElement.getAttribute('tabIndex')).toBe('-1');\n        done();\n      });\n    });\n\n    it('should add aria-disabled attribute if disabled', (done: () => void) => {\n      return builder.createAsync(TestApp).then(fixture => {\n        let testComponent = fixture.debugElement.componentInstance;\n        let buttonDebugElement = fixture.debugElement.query(By.css('a'));\n        fixture.detectChanges();\n        expect(buttonDebugElement.nativeElement.getAttribute('aria-disabled')).toBe('false');\n\n        testComponent.isDisabled = true;\n        fixture.detectChanges();\n        expect(buttonDebugElement.nativeElement.getAttribute('aria-disabled')).toBe('true');\n        done();\n      });\n    });\n\n  });\n});\n\n/** Test component that contains an MdButton. */\n@Component({\n  selector: 'test-app',\n  template: `\n    <button md-button type=\"button\" (click)=\"increment()\"\n      [disabled]=\"isDisabled\" [color]=\"buttonColor\">\n      Go\n    </button>\n    <a href=\"http://www.google.com\" md-button [disabled]=\"isDisabled\" [color]=\"buttonColor\">Link</a>\n  `,\n  directives: [MdButton, MdAnchor]\n})\nclass TestApp {\n  clickCount: number = 0;\n  isDisabled: boolean = false;\n\n  increment() {\n    this.clickCount++;\n  }\n}\n"]}