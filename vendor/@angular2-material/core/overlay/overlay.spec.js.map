{"version":3,"file":"overlay.spec.js","sourceRoot":"","sources":["../../src/demo-app/core/overlay/overlay.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  inject,\n  fakeAsync,\n  flushMicrotasks,\n  beforeEachProviders,\n} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {\n  Component,\n  ViewChild,\n  provide, ViewContainerRef,\n} from '@angular/core';\nimport {TemplatePortalDirective} from '../portal/portal-directives';\nimport {TemplatePortal, ComponentPortal} from '../portal/portal';\nimport {Overlay, OVERLAY_CONTAINER_TOKEN} from './overlay';\nimport {OverlayRef} from './overlay-ref';\nimport {OverlayState} from './overlay-state';\nimport {PositionStrategy} from './position/position-strategy';\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ViewportRuler} from './position/viewport-ruler';\n\n\ndescribe('Overlay', () => {\n  let builder: TestComponentBuilder;\n  let overlay: Overlay;\n  let componentPortal: ComponentPortal;\n  let templatePortal: TemplatePortal;\n  let overlayContainerElement: HTMLElement;\n\n  beforeEachProviders(() => [\n    Overlay,\n    OverlayPositionBuilder,\n    ViewportRuler,\n    provide(OVERLAY_CONTAINER_TOKEN, {\n      useFactory: () => {\n        overlayContainerElement = document.createElement('div');\n        return overlayContainerElement;\n      }\n    })\n  ]);\n\n  let deps = [TestComponentBuilder, Overlay];\n  beforeEach(inject(deps, fakeAsync((tcb: TestComponentBuilder, o: Overlay) => {\n    builder = tcb;\n    overlay = o;\n\n    builder.createAsync(TestComponentWithTemplatePortals).then(fixture => {\n      fixture.detectChanges();\n      templatePortal = fixture.componentInstance.templatePortal;\n      componentPortal = new ComponentPortal(PizzaMsg, fixture.componentInstance.viewContainerRef);\n    });\n\n    flushMicrotasks();\n  })));\n\n  it('should load a component into an overlay', fakeAsyncTest(() => {\n    let overlayRef: OverlayRef;\n\n    overlay.create().then(ref => {\n      overlayRef = ref;\n      overlayRef.attach(componentPortal);\n    });\n\n    flushMicrotasks();\n\n    expect(overlayContainerElement.textContent).toContain('Pizza');\n\n    overlayRef.dispose();\n    expect(overlayContainerElement.childNodes.length).toBe(0);\n    expect(overlayContainerElement.textContent).toBe('');\n  }));\n\n  it('should load a template portal into an overlay', fakeAsyncTest(() => {\n    let overlayRef: OverlayRef;\n\n    overlay.create().then(ref => {\n      overlayRef = ref;\n      overlayRef.attach(templatePortal);\n    });\n\n    flushMicrotasks();\n\n    expect(overlayContainerElement.textContent).toContain('Cake');\n\n    overlayRef.dispose();\n    expect(overlayContainerElement.childNodes.length).toBe(0);\n    expect(overlayContainerElement.textContent).toBe('');\n  }));\n\n  it('should open multiple overlays', fakeAsyncTest(() => {\n    let pizzaOverlayRef: OverlayRef;\n    let cakeOverlayRef: OverlayRef;\n\n    overlay.create().then(ref => {\n      pizzaOverlayRef = ref;\n      pizzaOverlayRef.attach(componentPortal);\n    });\n\n    flushMicrotasks();\n\n    overlay.create().then(ref => {\n      cakeOverlayRef = ref;\n      cakeOverlayRef.attach(templatePortal);\n    });\n\n    flushMicrotasks();\n\n    expect(overlayContainerElement.childNodes.length).toBe(2);\n    expect(overlayContainerElement.textContent).toContain('Pizza');\n    expect(overlayContainerElement.textContent).toContain('Cake');\n\n    pizzaOverlayRef.dispose();\n    expect(overlayContainerElement.childNodes.length).toBe(1);\n    expect(overlayContainerElement.textContent).toContain('Cake');\n\n    cakeOverlayRef.dispose();\n    expect(overlayContainerElement.childNodes.length).toBe(0);\n    expect(overlayContainerElement.textContent).toBe('');\n  }));\n\n  describe('applyState', () => {\n    let state: OverlayState;\n\n    beforeEach(() => {\n      state = new OverlayState();\n    });\n\n    it('should apply the positioning strategy', fakeAsyncTest(() => {\n      state.positionStrategy = new FakePositionStrategy();\n\n      overlay.create(state).then(ref => {\n        ref.attach(componentPortal);\n      });\n\n      flushMicrotasks();\n\n      expect(overlayContainerElement.querySelectorAll('.fake-positioned').length).toBe(1);\n    }));\n  });\n});\n\n\n/** Simple component for testing ComponentPortal. */\n@Component({\n  selector: 'pizza-msg',\n  template: '<p>Pizza</p>',\n})\nclass PizzaMsg {\n}\n\n\n/** Test-bed component that contains a TempatePortal and an ElementRef. */\n@Component({\n  selector: 'portal-test',\n  template: `<template portal>Cake</template>`,\n  directives: [TemplatePortalDirective],\n})\nclass TestComponentWithTemplatePortals {\n  @ViewChild(TemplatePortalDirective) templatePortal: TemplatePortalDirective;\n\n  constructor(public viewContainerRef: ViewContainerRef) {\n  }\n}\n\nclass FakePositionStrategy implements PositionStrategy {\n  apply(element: Element): Promise<void> {\n    element.classList.add('fake-positioned');\n    return Promise.resolve();\n  }\n\n}\n\nfunction fakeAsyncTest(fn: () => void) {\n  return inject([], fakeAsync(fn));\n}\n"]}