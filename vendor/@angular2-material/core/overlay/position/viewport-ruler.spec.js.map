{"version":3,"file":"viewport-ruler.spec.js","sourceRoot":"","sources":["../../../src/demo-app/core/overlay/position/viewport-ruler.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {it, describe, expect, beforeEach} from '@angular/core/testing';\nimport {ViewportRuler} from './viewport-ruler';\n\n\n// For all tests, we assume the browser window is 1024x786 (outerWidth x outerHeight).\n// The karma config has been set to this for local tests, and it is the default size\n// for tests on CI (both SauceLabs and Browserstack).\n\n// While we know the *outer* window width/height, the innerWidth and innerHeight depend on the\n// the size of the individual browser's chrome, so we have to use window.innerWidth and\n// window.innerHeight in the unit test instead of hard-coded values.\n\ndescribe('ViewportRuler', () => {\n  let ruler: ViewportRuler;\n\n  let startingWindowWidth = window.innerWidth;\n  let startingWindowHeight = window.innerHeight;\n\n  // Create a very large element that will make the page scrollable.\n  let veryLargeElement: HTMLElement = document.createElement('div');\n  veryLargeElement.style.width = '6000px';\n  veryLargeElement.style.height = '6000px';\n\n  beforeEach(() => {\n    ruler = new ViewportRuler();\n    scrollTo(0, 0);\n  });\n\n  it('should get the viewport bounds when the page is not scrolled', () => {\n    let bounds = ruler.getViewportRect();\n    expect(bounds.top).toBe(0);\n    expect(bounds.left).toBe(0);\n    expect(bounds.bottom).toBe(window.innerHeight);\n    expect(bounds.right).toBe(window.innerWidth);\n  });\n\n  it('should get the viewport bounds when the page is scrolled', () => {\n    document.body.appendChild(veryLargeElement);\n    scrollTo(1500, 2000);\n\n    let bounds = ruler.getViewportRect();\n\n    // In the iOS simulator (BrowserStack & SauceLabs), adding the content to the\n    // body causes karma's iframe for the test to stretch to fit that content once we attempt to\n    // scroll the page. Setting width / height / maxWidth / maxHeight on the iframe does not\n    // successfully constrain its size. As such, skip assertions in environments where the\n    // window size has changed since the start of the test.\n    if (window.innerWidth > startingWindowWidth || window.innerHeight > startingWindowHeight) {\n      return;\n    }\n\n    expect(bounds.top).toBe(2000);\n    expect(bounds.left).toBe(1500);\n    expect(bounds.bottom).toBe(2000 + window.innerHeight);\n    expect(bounds.right).toBe(1500 + window.innerWidth);\n\n    document.body.removeChild(veryLargeElement);\n  });\n\n  it('should get the bounds based on client coordinates when the page is pinch-zoomed', () => {\n    // There is no API to make the browser pinch-zoom, so there's no real way to automate\n    // tests for this behavior. Leaving this test here as documentation for the behavior.\n  });\n\n  it('should get the scroll position when the page is not scrolled', () => {\n    var scrollPos = ruler.getViewportScrollPosition();\n    expect(scrollPos.top).toBe(0);\n    expect(scrollPos.left).toBe(0);\n  });\n\n  it('should get the scroll position when the page is scrolled', () => {\n    document.body.appendChild(veryLargeElement);\n    scrollTo(1500, 2000);\n\n    // In the iOS simulator (BrowserStack & SauceLabs), adding the content to the\n    // body causes karma's iframe for the test to stretch to fit that content once we attempt to\n    // scroll the page. Setting width / height / maxWidth / maxHeight on the iframe does not\n    // successfully constrain its size. As such, skip assertions in environments where the\n    // window size has changed since the start of the test.\n    if (window.innerWidth > startingWindowWidth || window.innerHeight > startingWindowHeight) {\n      return;\n    }\n\n    var scrollPos = ruler.getViewportScrollPosition();\n    expect(scrollPos.top).toBe(2000);\n    expect(scrollPos.left).toBe(1500);\n\n    document.body.removeChild(veryLargeElement);\n  });\n});\n"]}