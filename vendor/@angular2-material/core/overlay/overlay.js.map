{"version":3,"file":"overlay.js","sourceRoot":"","sources":["../../src/demo-app/core/overlay/overlay.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,qBAKO,eAAe,CAAC,CAAA;AACvB,8BAA2B,iBAAiB,CAAC,CAAA;AAC7C,gCAA4B,2BAA2B,CAAC,CAAA;AACxD,4BAAyB,eAAe,CAAC,CAAA;AAEzC,yCAAqC,qCAAqC,CAAC,CAAA;AAC3E,+BAA4B,2BAA2B,CAAC,CAAA;AAGxD,iFAAiF;AACpE,+BAAuB,GAAG,IAAI,kBAAW,CAAC,kBAAkB,CAAC,CAAC;AAE3E,8BAA8B;AAC9B,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,oDAAoD;AACpD,IAAI,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;AAGtC;;;;;;;GAOG;AAEH;IACE,iBAC6C,wBAAqC,EACtE,kBAAqC,EACrC,gBAAwC;QAFP,6BAAwB,GAAxB,wBAAwB,CAAa;QACtE,uBAAkB,GAAlB,kBAAkB,CAAmB;QACrC,qBAAgB,GAAhB,gBAAgB,CAAwB;IACpD,CAAC;IAED;;;;OAIG;IACH,wBAAM,GAAN,UAAO,KAAkC;QAAzC,iBAEC;QAFM,qBAAkC,GAAlC,oBAAkC;QACvC,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,EAAnC,CAAmC,CAAC,CAAC;IACrF,CAAC;IAED;;;OAGG;IACH,0BAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED;;;OAGG;IACK,oCAAkB,GAA1B;QACE,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,EAAE,GAAG,gBAAc,YAAY,EAAI,CAAC;QACzC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAEtC,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAEhD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED;;;;OAIG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB;QACzC,MAAM,CAAC,IAAI,+BAAa,CACpB,IAAI,EACJ,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC/B,CAAC;IAED;;;;;OAKG;IACK,mCAAiB,GAAzB,UAA0B,IAAiB,EAAE,KAAmB;QAC9D,MAAM,CAAC,IAAI,wBAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IACnE,CAAC;IA1DF;QAAC,iBAAU,EAAE;mBAGP,aAAM,CAAC,+BAAuB,CAAC;;eAHxB;IA2Dd,cAAC;AAAD,CAAC,AA1DD,IA0DC;AA1DY,eAAO,UA0DnB,CAAA;AAGD,yDAAyD;AAC5C,yBAAiB,GAAG;IAC/B,8BAAa;IACb,iDAAsB;IACtB,OAAO;CACR,CAAC;AAEF,gFAAgF;AAChF,8BAA2B,iBAAiB,CAAC;AAArC,oDAAqC;AAC7C,4BAAyB,eAAe,CAAC;AAAjC,8CAAiC;AACzC,kCAAqC,qBAAqB,CAAC;AAAnD,4EAAmD;AAC3D,mCAA2E,sBAAsB,CAAC;AAA1F,qEAAkB;AAAE,mFAAyB;AAAE,2DAA2C","sourcesContent":["import {\n  ComponentResolver,\n  OpaqueToken,\n  Inject,\n  Injectable,\n} from '@angular/core';\nimport {OverlayState} from './overlay-state';\nimport {DomPortalHost} from '../portal/dom-portal-host';\nimport {OverlayRef} from './overlay-ref';\n\nimport {OverlayPositionBuilder} from './position/overlay-position-builder';\nimport {ViewportRuler} from './position/viewport-ruler';\n\n\n/** Token used to inject the DOM element that serves as the overlay container. */\nexport const OVERLAY_CONTAINER_TOKEN = new OpaqueToken('overlayContainer');\n\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n\n/** The default state for newly created overlays. */\nlet defaultState = new OverlayState();\n\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n @Injectable()\nexport class Overlay {\n  constructor(\n      @Inject(OVERLAY_CONTAINER_TOKEN) private _overlayContainerElement: HTMLElement,\n      private _componentResolver: ComponentResolver,\n      private _positionBuilder: OverlayPositionBuilder) {\n  }\n\n  /**\n   * Creates an overlay.\n   * @param state State to apply to the overlay.\n   * @returns A reference to the created overlay.\n   */\n  create(state: OverlayState = defaultState): Promise<OverlayRef> {\n    return this._createPaneElement().then(pane => this._createOverlayRef(pane, state));\n  }\n\n  /**\n   * Returns a position builder that can be used, via fluent API,\n   * to construct and configure a position strategy.\n   */\n  position() {\n    return this._positionBuilder;\n  }\n\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Promise resolving to the created element.\n   */\n  private _createPaneElement(): Promise<HTMLElement> {\n    var pane = document.createElement('div');\n    pane.id = `md-overlay-${nextUniqueId++}`;\n    pane.classList.add('md-overlay-pane');\n\n    this._overlayContainerElement.appendChild(pane);\n\n    return Promise.resolve(pane);\n  }\n\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n  private _createPortalHost(pane: HTMLElement): DomPortalHost {\n    return new DomPortalHost(\n        pane,\n        this._componentResolver);\n  }\n\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   * @param state\n   * @returns {OverlayRef}\n   */\n  private _createOverlayRef(pane: HTMLElement, state: OverlayState): OverlayRef {\n    return new OverlayRef(this._createPortalHost(pane), pane, state);\n  }\n}\n\n\n/** Providers for Overlay and its related injectables. */\nexport const OVERLAY_PROVIDERS = [\n  ViewportRuler,\n  OverlayPositionBuilder,\n  Overlay,\n];\n\n// Re-export overlay-related modules so they can be imported directly from here.\nexport {OverlayState} from './overlay-state';\nexport {OverlayRef} from './overlay-ref';\nexport {createOverlayContainer} from './overlay-container';\nexport {OVERLAY_DIRECTIVES, ConnectedOverlayDirective, OverlayOrigin} from './overlay-directives';\n"]}