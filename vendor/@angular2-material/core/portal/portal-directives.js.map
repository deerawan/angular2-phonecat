{"version":3,"file":"portal-directives.js","sourceRoot":"","sources":["../../src/demo-app/core/portal/portal-directives.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    ComponentRef,\n    Directive,\n    TemplateRef,\n    ComponentResolver,\n    ViewContainerRef\n} from '@angular/core';\nimport {Portal, TemplatePortal, ComponentPortal, BasePortalHost} from './portal';\n\n\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n *\n * Usage:\n * <template portal #greeting>\n *   <p> Hello {{name}} </p>\n * </template>\n */\n@Directive({\n  selector: '[portal]',\n  exportAs: 'portal',\n})\nexport class TemplatePortalDirective extends TemplatePortal {\n  constructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\n}\n\n\n/**\n * Directive version of a PortalHost. Because the directive *is* a PortalHost, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * <template [portalHost]=\"greeting\"></template>\n */\n@Directive({\n  selector: '[portalHost]',\n  inputs: ['portal: portalHost']\n})\nexport class PortalHostDirective extends BasePortalHost {\n  /** The attached portal. */\n  private _portal: Portal<any>;\n\n  constructor(\n      private _componentResolver: ComponentResolver,\n      private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  get portal(): Portal<any> {\n    return this._portal;\n  }\n\n  set portal(p: Portal<any>) {\n    this._replaceAttachedPortal(p);\n  }\n\n  /** Attach the given ComponentPortal to this PortlHost using the ComponentResolver. */\n  attachComponentPortal(portal: ComponentPortal): Promise<ComponentRef<any>> {\n    portal.setAttachedHost(this);\n\n    // If the portal specifies an origin, use that as the logical location of the component\n    // in the application tree. Otherwise use the location of this PortalHost.\n    let viewContainerRef = portal.viewContainerRef != null ?\n        portal.viewContainerRef :\n        this._viewContainerRef;\n\n    return this._componentResolver.resolveComponent(portal.component).then(componentFactory => {\n      let ref = viewContainerRef.createComponent(\n          componentFactory, viewContainerRef.length, viewContainerRef.parentInjector);\n\n      this.setDisposeFn(() => ref.destroy());\n      return ref;\n    });\n  }\n\n  /** Attach the given TemplatePortal to this PortlHost as an embedded View. */\n  attachTemplatePortal(portal: TemplatePortal): Promise<Map<string, any>> {\n    portal.setAttachedHost(this);\n\n    this._viewContainerRef.createEmbeddedView(portal.templateRef);\n    this.setDisposeFn(() => this._viewContainerRef.clear());\n\n    // TODO(jelbourn): return locals from view\n    return Promise.resolve(new Map<string, any>());\n  }\n\n  /** Detatches the currently attached Portal (if there is one) and attaches the given Portal. */\n  private _replaceAttachedPortal(p: Portal<any>): void {\n    let maybeDetach = this.hasAttached() ? this.detach() : Promise.resolve();\n\n    maybeDetach.then(() => {\n      if (p != null) {\n        this.attach(p);\n        this._portal = p;\n      }\n    });\n  }\n}\n\nexport const PORTAL_DIRECTIVES = [TemplatePortalDirective, PortalHostDirective];\n"]}