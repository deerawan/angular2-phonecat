{"version":3,"file":"live-announcer.spec.js","sourceRoot":"","sources":["../../src/demo-app/core/live-announcer/live-announcer.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  inject,\n  fakeAsync,\n  flushMicrotasks,\n  tick,\n  beforeEachProviders,\n  getTestInjector\n} from '@angular/core/testing';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {Component, provide} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MdLiveAnnouncer, LIVE_ANNOUNCER_ELEMENT_TOKEN} from './live-announcer';\n\ndescribe('MdLiveAnnouncer', () => {\n  let live: MdLiveAnnouncer;\n  let builder: TestComponentBuilder;\n  let liveEl: Element;\n\n  beforeEachProviders(() => [MdLiveAnnouncer]);\n\n  beforeEach(inject([TestComponentBuilder, MdLiveAnnouncer],\n    (tcb: TestComponentBuilder, _live: MdLiveAnnouncer) => {\n      builder = tcb;\n      live = _live;\n      liveEl = getLiveElement();\n    }));\n\n  afterEach(() => {\n    // In our tests we always remove the current live element, because otherwise we would have\n    // multiple live elements due multiple service instantiations.\n    liveEl.parentNode.removeChild(liveEl);\n  });\n\n  it('should correctly update the announce text', fakeAsyncTest(() => {\n    let appFixture: ComponentFixture<TestApp> = null;\n\n    builder.createAsync(TestApp).then(fixture => {\n      appFixture = fixture;\n    });\n\n    flushMicrotasks();\n\n    let buttonElement = appFixture.debugElement\n      .query(By.css('button')).nativeElement;\n\n    buttonElement.click();\n\n    // This flushes our 100ms timeout for the screenreaders.\n    tick(100);\n\n    expect(liveEl.textContent).toBe('Test');\n  }));\n\n  it('should correctly update the politeness attribute', fakeAsyncTest(() => {\n    let appFixture: ComponentFixture<TestApp> = null;\n\n    builder.createAsync(TestApp).then(fixture => {\n      appFixture = fixture;\n    });\n\n    flushMicrotasks();\n\n    live.announce('Hey Google', 'assertive');\n\n    // This flushes our 100ms timeout for the screenreaders.\n    tick(100);\n\n    expect(liveEl.textContent).toBe('Hey Google');\n    expect(liveEl.getAttribute('aria-live')).toBe('assertive');\n  }));\n\n  it('should apply the aria-live value polite by default', fakeAsyncTest(() => {\n    let appFixture: ComponentFixture<TestApp> = null;\n\n    builder.createAsync(TestApp).then(fixture => {\n      appFixture = fixture;\n    });\n\n    flushMicrotasks();\n\n    live.announce('Hey Google');\n\n    // This flushes our 100ms timeout for the screenreaders.\n    tick(100);\n\n    expect(liveEl.textContent).toBe('Hey Google');\n    expect(liveEl.getAttribute('aria-live')).toBe('polite');\n  }));\n\n  it('should allow to use a custom live element', fakeAsyncTest(() => {\n    let customLiveEl = document.createElement('div');\n\n    // We need to reset our test injector here, because it is already instantiated above.\n    getTestInjector().reset();\n\n    getTestInjector().addProviders([\n      provide(LIVE_ANNOUNCER_ELEMENT_TOKEN, {useValue: customLiveEl}),\n      MdLiveAnnouncer\n    ]);\n\n    let injector = getTestInjector().createInjector();\n    let liveService: MdLiveAnnouncer = injector.get(MdLiveAnnouncer);\n\n    liveService.announce('Custom Element');\n\n    // This flushes our 100ms timeout for the screenreaders.\n    tick(100);\n\n    expect(customLiveEl.textContent).toBe('Custom Element');\n  }));\n\n});\n\nfunction fakeAsyncTest(fn: () => void) {\n  return inject([], fakeAsync(fn));\n}\n\nfunction getLiveElement(): Element {\n  return document.body.querySelector('.md-live-announcer');\n}\n\n@Component({\n  selector: 'test-app',\n  template: `<button (click)=\"announceText('Test')\">Announce</button>`,\n})\nclass TestApp {\n\n  constructor(private live: MdLiveAnnouncer) {\n  };\n\n  announceText(message: string) {\n    this.live.announce(message);\n  }\n\n}\n\n"]}