{"version":3,"file":"toolbar.spec.js","sourceRoot":"","sources":["../../src/demo-app/components/toolbar/toolbar.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAwB,eAAe,CAAC,CAAA;AACxC,wBAMO,uBAAuB,CAAC,CAAA;AAC/B,wBAAmC,2BAA2B,CAAC,CAAA;AAC/D,iCAAiB,2BAA2B,CAAC,CAAA;AAC7C,wBAAwB,WAAW,CAAC,CAAA;AAEpC,kBAAQ,CAAC,WAAW,EAAE;IACpB,IAAI,OAA6B,CAAC;IAElC,oBAAU,CAAC,gBAAM,CAAC,CAAC,8BAAoB,CAAC,EAAE,UAAC,GAAyB;QAClE,OAAO,GAAG,GAAG,CAAC;IAChB,CAAC,CAAC,CAAC,CAAC;IAEJ,YAAE,CAAC,6CAA6C,EAAE,UAAC,IAAgB;QACjE,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO;YAC/C,IAAI,aAAa,GAAG,OAAO,CAAC,YAAY,CAAC,iBAAiB,CAAC;YAC3D,IAAI,mBAAmB,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,qBAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;YAE3E,aAAa,CAAC,YAAY,GAAG,SAAS,CAAC;YACvC,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEtF,aAAa,CAAC,YAAY,GAAG,QAAQ,CAAC;YACtC,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvF,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAErF,aAAa,CAAC,YAAY,GAAG,MAAM,CAAC;YACpC,OAAO,CAAC,aAAa,EAAE,CAAC;YAExB,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtF,gBAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEnF,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC;AAWH;IAAA;IAEA,CAAC;IAXD;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,QAAQ,EAAE,qGAIT;YACD,UAAU,EAAE,CAAC,mBAAS,CAAC;SACxB,CAAC;;eAAA;IAGF,cAAC;AAAD,CAAC,AAFD,IAEC","sourcesContent":["import {Component} from '@angular/core';\nimport {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  inject,\n} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {By} from '@angular/platform-browser';\nimport {MdToolbar} from './toolbar';\n\ndescribe('MdToolbar', () => {\n  let builder: TestComponentBuilder;\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  it('should apply class based on color attribute', (done: () => void) => {\n    return builder.createAsync(TestApp).then((fixture) => {\n      let testComponent = fixture.debugElement.componentInstance;\n      let toolbarDebugElement = fixture.debugElement.query(By.css('md-toolbar'));\n\n      testComponent.toolbarColor = 'primary';\n      fixture.detectChanges();\n\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-primary')).toBe(true);\n\n      testComponent.toolbarColor = 'accent';\n      fixture.detectChanges();\n\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-primary')).toBe(false);\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-accent')).toBe(true);\n\n      testComponent.toolbarColor = 'warn';\n      fixture.detectChanges();\n\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-accent')).toBe(false);\n      expect(toolbarDebugElement.nativeElement.classList.contains('md-warn')).toBe(true);\n\n      done();\n    });\n  });\n\n});\n\n@Component({\n  selector: 'test-app',\n  template: `\n    <md-toolbar [color]=\"toolbarColor\">\n      <span>Test Toolbar</span>\n    </md-toolbar>\n  `,\n  directives: [MdToolbar]\n})\nclass TestApp {\n  toolbarColor: string;\n}\n"]}