{"version":3,"file":"phone-list.component.js","sourceRoot":"","sources":["phone-list.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HTTP_PROVIDERS }    from '@angular/http';\nimport { Router } from '@angular/router';\nimport { PhoneService } from '../shared/phone.service';\nimport { Phone } from '../shared/phone.model';\nimport { MD_CARD_DIRECTIVES } from '@angular2-material/card';\nimport { MD_INPUT_DIRECTIVES } from '@angular2-material/input';\n\n@Component({\n  moduleId: module.id,\n  selector: 'phone-list',\n  templateUrl: 'phone-list.component.html',\n  styleUrls: ['phone-list.component.css'],\n  directives: [\n    MD_CARD_DIRECTIVES,\n    MD_INPUT_DIRECTIVES\n  ]\n})\nexport class PhoneListComponent implements OnInit {\n  query = '';\n  orderProp = 'age';\n  phones: Phone[];\n  selectedPhone: Phone;\n  filteredPhones: Phone[];\n  errorMessage: string;\n\n  constructor(\n    private phoneService: PhoneService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.getPhones();\n  }\n\n  getPhones() {\n    this.phoneService.getPhones()\n                     .subscribe(\n                       phones => this.phones = this.filteredPhones = phones,\n                       error => this.errorMessage = <any>error\n                     );\n  }\n\n  goToDetail(phone: Phone) {\n    let link = ['/phone', phone.id];\n    this.router.navigate(link);\n  }\n\n  searchPhone() {\n    var newFilteredPhones = [];\n    var queryText = this.query.toLowerCase();\n    var isFound = false;\n\n    this.phones.forEach(phone => {\n      isFound = phone.name.toLowerCase().indexOf(queryText) > -1 ||\n        phone.snippet.toLowerCase().indexOf(queryText) > -1\n      if (isFound) {\n        newFilteredPhones.push(phone);\n      };\n    });\n\n    this.filteredPhones = newFilteredPhones;\n  }\n\n  sortPhone(selectEvent) {\n    var newOrderProp = selectEvent.target.value;\n    this.orderProp = newOrderProp;\n\n    var newSortedPhones = this.phones.sort((phone1, phone2) => {\n      if (phone1[newOrderProp] < phone2[newOrderProp]) {\n        return -1;\n      }\n\n      if (phone1[newOrderProp] > phone2[newOrderProp]) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    this.filteredPhones = newSortedPhones;\n  }\n}\n"]}